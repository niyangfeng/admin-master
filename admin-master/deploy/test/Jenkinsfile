def label = "slave-${UUID.randomUUID().toString()}"



podTemplate(label: label,namespace: 'default',serviceAccount: 'jenkins', containers: [
  //containerTemplate(name: 'maven', image: 'maven:3.6-alpine', command: 'cat', ttyEnabled: true),
  //containerTemplate(name: 'node', image: '192.168.3.201/k8s/centos7-6-node:10.1', command: 'cat', ttyEnabled: true),
  //containerTemplate(name: 'node', image: '192.168.3.201/k8s/test-node-13-2:1.0', command: 'cat', ttyEnabled: true),
containerTemplate(name: 'node', image: '192.168.2.120/k8s/node-12-18:1.0', command: 'cat', ttyEnabled: true),
  //containerTemplate(name: 'node', image: '192.168.2.120/k8s/test-node-13-2:1.0', command: 'cat', ttyEnabled: true),
  containerTemplate(name: 'docker', image: '192.168.2.120/k8s/docker-19:1.0', command: 'cat', ttyEnabled: true),
  containerTemplate(name: 'kubectl', image: '192.168.2.120/k8s/cnych/kubectl', command: 'cat', ttyEnabled: true),
  //containerTemplate(name: 'helm', image: 'cnych/helm', command: 'cat', ttyEnabled: true)
], volumes: [
 // hostPathVolume(mountPath: '/root/.m2', hostPath: '/var/run/m2'),
  hostPathVolume(mountPath: '/home/jenkins/agent/workspace/', hostPath: '/home/jenkins/agent/workspace/'),
  hostPathVolume(mountPath: '/home/jenkins/.kube', hostPath: '/root/.kube'),
  hostPathVolume(mountPath: '/var/run/docker.sock', hostPath: '/var/run/docker.sock')
]) {
  node(label) {
    def myRepo = checkout scm
    def gitCommit = myRepo.GIT_COMMIT
    def gitBranch = myRepo.GIT_BRANCH
    def imageTag = sh(script: "git rev-parse --short HEAD", returnStdout: true).trim()
    
    //测试环境需要修改的
    def proJect = "testkcxtt.kakahui.net"
    def ProJect_tar = "testkcxtt.kakahui.net.tar.gz"
    // 定义创建PV、PVC
    def PVCName = "testkcxtt-kakahui-net"
    // 修改nginx server_name H5 外网访问使用
    def server_name = "testkcxtt"
    // 项目dist 名称(yarn 后的)
    def DIST = "dist-test"
    // 定义pod svc ingress namespace
    def NameSpace2 = "kcxt"
    // 定义 项目地址
    def NAMEDIR = "deploy/test"

    
    
    // 定义项目默认不需要修改
    // 定义harbor地址
    def harBor_ip = "192.168.2.120"
    // yarn 环境变量
    def yarn_Ambient = "build-test"
    // 定义replicas 数量
    def REP_num = 1
    // 定义CPU 、内存
    def CPU_max = 500
    def CPU_min = 200
    def MEM_max = 512
    def MEM_min = 256
    // 修改nginx.conf
    def Nginx_Conf = "test-h5-deploy.conf"


    
    stage('1 代码编译打包') {
      container('node') {
        sh "rm -fr dist ${DIST} ${proJect} ${ProJect_tar} "
        sh "rm -fr deploy/test/${proJect}"
        echo "代码编译打包阶段"
        sh "yarn install"
        sh "yarn  ${yarn_Ambient}"
        sh "ls -lrth"
        sh "mv ${DIST} ${proJect}"
        //sh "tar zcf ${ProJect_tar}  ${proJect} "
         sh "ls -lrth"
        sh "mv ${proJect} ${NAMEDIR}/ "
        sh  "ls -lrth ${NAMEDIR}/ "
      }
    }
    
    
    stage('2 修改Dockerfile和h5conf') {
    
    sh " sed -i s#H5NAME#${server_name}#g ${NAMEDIR}/test-h5-deploy.conf"  
    sh " sed -i s#NGINXDIR#${proJect}#g ${NAMEDIR}/test-h5-deploy.conf"
    
    sh "cat ${NAMEDIR}/test-h5-deploy.conf "
    
    sh " sed -i s#NginxName#${Nginx_Conf}#g ${NAMEDIR}/Dockerfile"
    sh "sed -i s#ProJectName#${proJect}#g ${NAMEDIR}/Dockerfile "
    
    sh "cat ${NAMEDIR}/Dockerfile"

    }
    
    
    stage('3 构建 Docker 镜像') {
        withCredentials([usernamePassword(credentialsId: 'dockerharbor', passwordVariable: 'dockerharborPassword', usernameVariable: 'dockerharborUser')]) {
        
      container('docker') {
        sh "docker login http://${harBor_ip} -u ${dockerharborUser} -p ${dockerharborPassword}"
        sh "docker build -t ${harBor_ip}/k8s/${PVCName}:${imageTag} ${NAMEDIR}/. "
        sh "docker push ${harBor_ip}/k8s/${PVCName}:${imageTag}"
     
       // echo "构建 Docker 镜像阶段"
       // sh "sh "docker build -t sh jenkins-demo:${build_tag} .""
       }
      }
    }
    //stage('4 运行 Kubectl') {
    //  container('kubectl') {
    //    echo "查看 K8S 集群 Pod 列表"
   //     sh "kubectl get pods"
   //   }
   // }

    stage('5 部署') {
      container('kubectl') {
        // 修改CPU、内存
        sh "sed -i 's#CPU_MAX#${CPU_max}#g'  ${NAMEDIR}/test-h5-deploy.yaml"
        sh "sed -i 's#CPU_MIN#${CPU_min}#g'  ${NAMEDIR}/test-h5-deploy.yaml"
        sh "sed -i 's#MEM_MAX#${MEM_max}#g'  ${NAMEDIR}/test-h5-deploy.yaml"
        sh "sed -i 's#MEM_MIN#${MEM_min}#g'  ${NAMEDIR}/test-h5-deploy.yaml"
        // 修改项目名称
        sh "sed -i 's#PVCNAME#${PVCName}#g'  ${NAMEDIR}/test-h5-deploy.yaml"
        // 修改副本
        sh "sed -i 's#NUM#${REP_num}#g'  ${NAMEDIR}/test-h5-deploy.yaml "
        // 修改ingress 域名
        sh " sed -i s#H5NAME#${server_name}#g ${NAMEDIR}/test-h5-deploy.yaml" 
        
        sh "cat ${NAMEDIR}/test-h5-deploy.conf"
        sh "sed -i 's/BUILD_TAG/${imageTag}/' ${NAMEDIR}/test-h5-deploy.yaml"
       // sh "sed -i 's/RPOJECT_NAME/${PVCName}/' test-h5-deploy.yaml"
       // harbor 地址
        sh "sed -i 's#HARBOR#${harBor_ip}#g'  ${NAMEDIR}/test-h5-deploy.yaml"
        // 修改pod svc ingress namespace 
        sh "sed -i s#NAMESPACE2#${NameSpace2}#g ${NAMEDIR}/test-h5-deploy.yaml"

        sh "cat ${NAMEDIR}/test-h5-deploy.yaml"

        sh "kubectl apply -f ${NAMEDIR}/test-h5-deploy.yaml"

        sh "kubectl get pod -n ${NameSpace2} "
      }
    }    
    
    
    //stage('运行 Helm') {
     // container('helm') {
    //    echo "查看 Helm Release 列表"
    //    sh "helm list"
    //  }
   // }
  }
}
